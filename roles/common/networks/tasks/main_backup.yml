---
# tasks file for ./roles/networks
#- name: network / main / Install required network libraries
#  yum: name={{ item }} state=installed
#  with_items:
#    - NetworkManager-glib
#    - NetworkManager-libnm-devel.x86_64
#    - nm-connection-editor.x86_64
#    - libsemanage-python
#    - policycoreutils-python
#  when: ansible_os_family == 'RedHat'

- name: packages / configure / Add the OS specific varibles
  include_vars: "{{ ansible_os_family }}.yml"

- name: packages / main / Install the required packages
  package:
    name: "{{ network_packages }}"
    state: present

- name: packages / main / Start NetworkManager
  service:
    name: NetworkManager
    state: started
    enabled: yes

#- name: nmcli add Ethernet - conn_name only & ip4 gw4
#  nmcli:
#    type: ethernet
#    conn_name: "{{item.conn_name}}"
#    ip4: "{{item.ip4}}"
#    gw4: "{{item.gw4}}"
#    state: present
#  with_items:
#    - "{{network_ethernet}}"
#  when: network_ethernet is defined

- name: network / main / Create ehthernet device profile
  shell: >
         nmcli c s {{ item.conn_name }} ||
         nmcli connection add type ethernet con-name {{ item.conn_name }} ifname {{ item.conn_name }}
  with_items:
    - "{{ network_ethernet }}"
  when: network_ethernet is defined

- name: network / main / Setup ethernet device profile
  shell: >
         nmcli c s {{ item.conn_name }} &&
         nmcli connection modify {{ item.conn_name }} ipv4.method manual ipv4.addresses {{ item.ip4 }} ipv4.gateway {{ item.gw4 }}
  with_items:
    - "{{ network_ethernet }}"
  when: network_ethernet is defined

- name: network / bond / Load bonding module
  modprobe:
    name: bonding
    state: present
  when: network_bond is defined

- name: network / main / Create bonding device profile
  shell: >
         nmcli c s {{ item.conn_name }} ||
         nmcli connection add type bond con-name {{ item.conn_name }} ifname {{ item.ifname }} mode {{ item.mode }}
  with_items:
    - "{{ network_bond }}"
  when: network_bond is defined

- name: network / main / Setup bonding device profile
  shell: >
         nmcli c s {{ item.conn_name }} &&
         nmcli connection modify {{ item.conn_name }} ipv4.method "manual" ipv4.addresses {{ item.ip4 }} ipv4.gateway {{ item.gw4 }}
  with_items:
    - "{{ network_bond }}"
  when: network_bond is defined

- name: network / main / Create bond-slave device profile
  shell: >
         nmcli c s bond-slave-{{ item.ifname }} ||
         nmcli connection add type bond-slave autoconnect yes ifname {{ item.ifname }} master {{ item.master }}
  with_items:
    - "{{ network_bond_slave }}"
  when: network_bond_slave is defined
