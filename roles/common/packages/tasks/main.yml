---
# tasks file for ./roles/packages

- name: main / Add the OS specific varibles
  include_vars: "{{ ansible_os_family }}.yml"

- name: main / Update apt packages
  apt:
    update_cache: yes
  when: ansible_os_family == 'Debian'

- name: main / Install the yum packages
  yum:
    name: "{{ item.value }}"
    state: present
  with_dict: "{{ required_packages }}"
  when: ansible_os_family == 'RedHat'

- name: main / Install packages from github
  git:
    repo: "{{ item.value.path }}"
    dest: "{{ home_path }}/{{ item.value.dir }}"
    force: yes
    update: yes
  become_user: "{{ ansible_user }}"
  with_dict: "{{ packages_from_github }}"
  notify:
    - Permission change to directories
    - Create symlink
    - Shell set up

- name: force notify handler
  meta: flush_handlers

- name: check autojump file
  stat:
    path: "/.autojump/etc/profile.d/autojump.sh"
  register: aj_path
- name: Install autojump
  shell: "cd {{ home_path }}/autojump && ./install.py"
  args:
    executable: /bin/bash
  become_user: "{{ ansible_user }}"
  when: aj_path.stat.exists == False
  register: result

- name: Install anyenv
  shell: |
    anyenv install {{ item.value.env }}
    exec $SHELL -l
  args:
    executable: /bin/bash
  become_user: "{{ ansible_user }}"
  # when: '"{{ item }}_path.stat.exists ==  False"'
  with_dict: "{{ anyenv }}"
  changed_when: False
  register: result

- name: Install go, python and activate
  shell: |
    {{ item.value.env }} install {{ item.value.ver }}
    {{ item.value.env }} global {{ item.value.ver }}
    {{ item.value.env }} rehash
    exec $SHELL -l
  with_dict: "{{ anyenv }}"
  args:
    executable: /bin/bash
  become_user: "{{ ansible_user }}"
  changed_when: False
  register: result

- name: Install fzf
  shell: |
    cd $HOME/.fzf
    ./install
    exec $SHELL -l
  become_user: "{{ ansible_user }}"
  changed_when: False
  register: result

- block:
  - name: .vim/autoloadディレクトリの存在チェック
    stat:
      path: "{{ home_path }}/.vim/autoload/"
    register: vim_path
  - name: Create vim-plug folder
    file:
      path: "{{ home_path }}/.vim/autoload"
      owner: "{{ ansible_user }}"
      group: wheel
      mode: 0755
      state: directory
    when: vim_path.stat.exists == False
  - name: Install vim-plug
    get_url:
      url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      dest: "{{ home_path }}/.vim/autoload/plug.vim"
      mode: 0755
      owner: "{{ ansible_user }}"


- block:
  - name: Install check enhancd finder
    stat:
      path: /usr/local/bin/finder
    register: finder_path
  - name: Install enhancd finder
    shell: >
      sh -c "curl https://raw.githubusercontent.com/b4b4r07/cli-finder/master/bin/finder -o /usr/local/bin/finder && chmod +x /usr/local/bin/finder"
    args:
      executable: /bin/bash
    when: finder_path.stat.exists == False

- block:
  - name: /usr/local/bin/vim ディレクトリの存在チェック
    stat:
      path: /usr/local/bin/vim
    register: vim_path
  - name: compile vim
    shell: >
      cd {{ home_path }}/vim8src && ./configure
      --enable-fail-if-missing
      --with-features=huge
      --disable-selinux
      --enable-luainterp
      --enable-perlinterp
      --enable-python3interp vi_cv_path_python3={{ pyenv_path }}
      --with-python3-config-dir={{ pyenv_gnu }}
      --enable-cscope
      --enable-fontset
      --enable-multibyte
    args:
      executable: /bin/bash
    become_user: "{{ ansible_user }}"
    when: vim_path.stat.exists == False
  - name: Make & install Vim
    shell: |
      cd {{ home_path }}/vim8src
      make
      make install
      git reset --hard
    when: vim_path.stat.exists == False
    args:
      executable: /bin/bash
  - name: PlugInstall from vim-plug
    shell: |
      vim -E -s -c "source ~/.vimrc" +PlugInstall +qall -V
    ignore_errors: yes
    args:
      executable: /bin/bash
    become_user: "{{ ansible_user }}"

- block:
  - name: Delete cloned directories
    file:
      path: "{{ home_path }}/{{ item }}"
      state: absent
    with_items:
      - autojump
      - tmuxsrc
      - vim8src

- name: Default shell to zsh
  shell: |
    chsh -s /bin/zsh
    exec $SHELL -l
  become_user: "{{ ansible_user }}"
