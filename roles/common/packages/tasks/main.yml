---
# tasks file for ./roles/packages
- name: main / Add the OS specific varibles
  include_vars: "{{ ansible_os_family }}.yml"

- name: debug
  debug:
    # msg: "os family={{ ansible_os_family }}"
    msg: "required_packages item={{ item.value  }}"
  with_dict: '{{ required_packages }}'

- name: main / Update apt packages
  apt:
    update_cache: yes
  when: ansible_os_family == 'Debian'

- block:
  - name: Has neovim Dir?
    stat:
      path: "/etc/yum.repos.d/dperson-neovim-epel-7.repo"
    register: neovim_path
  - name: Download neovim
    shell: |
      yum -y install epel-release
      curl -o /etc/yum.repos.d/dperson-neovim-epel-7.repo https://copr.fedorainfracloud.org/coprs/dperson/neovim/repo/epel-7/dperson-neovim-epel-7.repo
    args:
      executable: /bin/bash
    when: neovim_path.stat.exists == False
  - name: main / Install the yum packages
    yum:
      name: "{{ item.value }}"
      state: present
    with_dict: "{{ required_packages }}"
  when: ansible_os_family == 'RedHat'

- block:
  - name: homebrew update
    homebrew:
      update_homebrew: yes
  - name: main / Install homebrew packages
    homebrew:
      name: '{{ item.value }}'
      # state: '{{ item.state | default("present") }}'
    with_dict: '{{ required_packages }}'
  when: ansible_os_family == 'Darwin'

- name: main / Install packages from github
  git:
    repo: "{{ item.value.path }}"
    dest: "{{ home_path }}/{{ item.value.dir }}"
    force: yes
    update: yes
  become_user: "{{ ansible_user }}"
  # become_user: root
  with_dict: "{{ packages_from_github }}"
  notify:
    - Permission change to directories
    - Symlink
    - Install

- name: force notify handler
  meta: flush_handlers

- name: Install anyenv
  shell: |
    anyenv install {{ item.value.env }}
    exec $SHELL -l
  args:
    executable: /bin/bash
  become_user: "{{ ansible_user }}"
  # when: '"{{ item }}_path.stat.exists ==  False"'
  with_dict: "{{ anyenv }}"
  changed_when: False
  register: result

- name: Install go, python and activate
  shell: |
    {{ item.value.env }} install {{ item.value.ver }}
    {{ item.value.env }} global {{ item.value.ver }}
    {{ item.value.env }} rehash
    exec $SHELL -l
  with_dict: "{{ anyenv }}"
  args:
    executable: /bin/bash
  become_user: "{{ ansible_user }}"
  changed_when: False
  register: result

- block:
  - name: /usr/local/bin/vim ディレクトリの存在チェック
    stat:
      path: /usr/local/bin/vim
    register: vim_path
  - name: compile vim
    shell: >
      cd {{ home_path }}/vim8src && ./configure
      --enable-fail-if-missing
      --with-features=huge
      --disable-selinux
      --enable-luainterp
      --enable-perlinterp
      --enable-python3interp vi_cv_path_python3={{ pyenv_path }}
      --with-python3-config-dir={{ pyenv_gnu }}
      --enable-cscope
      --enable-fontset
      --enable-multibyte
    args:
      executable: /bin/bash
    become_user: "{{ ansible_user }}"
    when: vim_path.stat.exists == False
  - name: Make & install Vim
    shell: |
      cd {{ home_path }}/vim8src
      make
      make install
      git reset --hard
    when: vim_path.stat.exists == False
    args:
      executable: /bin/bash
  - name: Set git colorful
    shell: |
      git config --global color.ui true
    args:
      executable: /bin/bash
    become_user: "{{ ansible_user }}"

- block:
  - name: Delete cloned directories
    file:
      path: "{{ home_path }}/{{ item }}"
      state: absent
    with_items:
      # - autojump
      - tmuxsrc
      - vim8src

- name: Default shell to zsh
  user:
    name: "{{ ansible_user }}"
    shell: /bin/zsh
  become: true

- name: dotfiles settings
  shell: |
    cd "{{ home_path }}/dotfiles"
    git fetch origin feature_clean_shellfile
    git checkout feature_clean_shellfile
    ./init.sh
  args:
    executable: /bin/bash
  become_user: "{{ ansible_user }}"

